package edu.depaul.cdm.se.demo.dao;



import com.google.api.core.ApiFuture;
import com.google.firebase.database.*;
import edu.depaul.cdm.se.demo.entity.Guest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Repository;
import org.springframework.web.context.request.async.DeferredResult;

import java.util.*;

@Repository
@Qualifier("firebaseGuestData")
public class FirebaseGuestDaoImpl implements IGuestDao{

    @Autowired
    DatabaseReference firebaseDatabse;

    //DeferredResult<Map<String, Guest>>

    @Override
    public DeferredResult<Map<String, Guest>> getAllGuests() {
        final DeferredResult<Map<String, Guest>> result = new DeferredResult();

        DatabaseReference dataRef = firebaseDatabse.child("guests");
        dataRef.addListenerForSingleValueEvent(new ValueEventListener() {
            public void onDataChange(DataSnapshot snapshot) {
                // Get Guest as lists
                Map<String, Guest>  guestList = snapshot.getValue(new GenericTypeIndicator<Map<String, Guest>>() {});

                // do something here
                System.out.println("-------------------------get all guest" + guestList.values().toString());

                result.setResult(guestList);
            }

            public void onCancelled(DatabaseError databaseError) {
                System.out.println("Error: could not get all guest");

                result.setErrorResult(databaseError);
            }
        });

        return result;
    }



    @Override
    public Guest getGuestById(String id) {
        return null;
    }

    @Override
    public void deleteGuestById(String id) {
        DatabaseReference dataRef = firebaseDatabse.child("guests");


        dataRef.orderByKey().equalTo(id).addListenerForSingleValueEvent(new ValueEventListener() {

            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {

                for (DataSnapshot postsnapshot : dataSnapshot.getChildren()) {

                    String key = postsnapshot.getKey();
                    dataSnapshot.getRef().removeValueAsync();

                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
                System.out.println("Error: could not delete guest");
            }
        } );
    }

    @Override
    public void updateGuest(Guest guest) {

    }

    @Override
    public void insertGuest(Guest guest) {

        DatabaseReference dataRef = firebaseDatabse.child("guests");

        /**
         * Use push to save unique id
         * https://firebase.google.com/docs/database/admin/save-data#section-push
         */

        // Generate a reference to a new location and add some data using push()
        DatabaseReference pushedDataRef = dataRef.push();

        // Get the unique ID generated by a push()
        String id = pushedDataRef.getKey();

        guest.setId(id);

        ApiFuture<Void> guestSave =  dataRef.child(id).setValueAsync(guest);
        boolean f = guestSave.isDone();

        System.out.println("testing-firebase --- writeNew isdone: " + f);
    }
}
